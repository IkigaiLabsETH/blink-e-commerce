"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@edgestore+shared@0.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1_zod@3.23.8";
exports.ids = ["vendor-chunks/@edgestore+shared@0.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1_zod@3.23.8"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@edgestore+shared@0.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1_zod@3.23.8/node_modules/@edgestore/shared/dist/index.mjs":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@edgestore+shared@0.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1_zod@3.23.8/node_modules/@edgestore/shared/dist/index.mjs ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EDGE_STORE_ERROR_CODES: () => (/* binding */ EDGE_STORE_ERROR_CODES),\n/* harmony export */   EdgeStoreApiClientError: () => (/* binding */ EdgeStoreApiClientError),\n/* harmony export */   EdgeStoreError: () => (/* binding */ EdgeStoreError),\n/* harmony export */   initEdgeStore: () => (/* binding */ initEdgeStore)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/.pnpm/zod@3.23.8/node_modules/zod/lib/index.mjs\");\n\n\nfunction _define_property$1(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ const EDGE_STORE_ERROR_CODES = {\n    BAD_REQUEST: 400,\n    FILE_TOO_LARGE: 400,\n    MIME_TYPE_NOT_ALLOWED: 400,\n    UNAUTHORIZED: 401,\n    UPLOAD_NOT_ALLOWED: 403,\n    DELETE_NOT_ALLOWED: 403,\n    CREATE_CONTEXT_ERROR: 500,\n    SERVER_ERROR: 500\n};\nclass EdgeStoreError extends Error {\n    formattedMessage() {\n        return `${this.message}${this.details ? `\\n    Details: ${JSON.stringify(this.details)}` : ''}${this.cause ? `\\n    Caused by: ${this.cause.message}` : ''}`;\n    }\n    formattedJson() {\n        return {\n            message: this.code === 'SERVER_ERROR' ? 'Internal server error' : this.message,\n            code: this.code,\n            details: this.details\n        };\n    }\n    constructor(opts){\n        super(opts.message);\n        _define_property$1(this, \"cause\", void 0);\n        _define_property$1(this, \"code\", void 0);\n        _define_property$1(this, \"level\", void 0);\n        _define_property$1(this, \"details\", void 0);\n        this.name = 'EdgeStoreError';\n        this.code = opts.code;\n        this.cause = opts.cause;\n        this.level = EDGE_STORE_ERROR_CODES[opts.code] >= 500 ? 'error' : 'warn';\n        this.details = 'details' in opts ? opts.details : undefined;\n    }\n}\n\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass EdgeStoreApiClientError extends Error {\n    constructor(opts){\n        super(opts.response.message);\n        _define_property(this, \"data\", void 0);\n        this.name = 'EdgeStoreApiClientError';\n        this.data = opts.response;\n    }\n}\n\n/**\n * Creates a Proxy that prints the path to the property when called.\n *\n * Example:\n *\n * ```ts\n * const pathParamProxy = createPathParamProxy();\n * console.log(pathParamProxy.ctx.user.id());\n * // Logs: \"ctx.user.id\"\n * console.log(pathParamProxy.input.type());\n * // Logs: \"input.type\"\n * ```\n */ function createPathParamProxy() {\n    const getPath = (target, _prop)=>{\n        const proxyFunction = ()=>target;\n        return new Proxy(proxyFunction, {\n            get: (_target, propChild)=>{\n                return getPath(`${target}.${String(propChild)}`);\n            }\n        });\n    };\n    return new Proxy(()=>'', {\n        get: (_target, prop)=>{\n            return getPath(String(prop));\n        }\n    });\n}\n\nconst createNewBuilder = (initDef, newDef)=>{\n    const mergedDef = {\n        ...initDef,\n        ...newDef\n    };\n    return createBuilder({\n        type: mergedDef.type\n    }, mergedDef);\n};\nfunction createBuilder(opts, initDef) {\n    const _def = {\n        type: opts.type,\n        input: zod__WEBPACK_IMPORTED_MODULE_0__.z.never(),\n        path: [],\n        metadata: ()=>({}),\n        ...initDef\n    };\n    return {\n        $config: {\n            ctx: undefined\n        },\n        // @ts-expect-error - I think it would be too much work to make this type correct.\n        _def,\n        input (input) {\n            return createNewBuilder(_def, {\n                input\n            });\n        },\n        path (pathResolver) {\n            // TODO: Should throw a runtime error in the following cases:\n            // 1. in case of multiple keys in one object\n            // 2. in case of duplicate keys\n            const pathParamProxy = createPathParamProxy();\n            const params = pathResolver(pathParamProxy);\n            return createNewBuilder(_def, {\n                path: params\n            });\n        },\n        metadata (metadata) {\n            return createNewBuilder(_def, {\n                metadata\n            });\n        },\n        accessControl (accessControl) {\n            return createNewBuilder(_def, {\n                accessControl: accessControl\n            });\n        },\n        beforeUpload (beforeUpload) {\n            return createNewBuilder(_def, {\n                beforeUpload\n            });\n        },\n        beforeDelete (beforeDelete) {\n            return createNewBuilder(_def, {\n                beforeDelete\n            });\n        }\n    };\n}\nclass EdgeStoreBuilder {\n    context() {\n        return new EdgeStoreBuilder();\n    }\n    create() {\n        return createEdgeStoreInner()();\n    }\n}\nfunction createRouterFactory() {\n    return function createRouterInner(buckets) {\n        return {\n            $config: {\n                ctx: undefined\n            },\n            buckets\n        };\n    };\n}\nfunction initBucket(type, config) {\n    return createBuilder({\n        type\n    }, {\n        bucketConfig: config\n    });\n}\nfunction createEdgeStoreInner() {\n    return function initEdgeStoreInner() {\n        return {\n            /**\n       * Builder object for creating an image bucket\n       */ imageBucket (config) {\n                return initBucket('IMAGE', config);\n            },\n            /**\n       * Builder object for creating a file bucket\n       */ fileBucket (config) {\n                return initBucket('FILE', config);\n            },\n            /**\n       * Create a router\n       */ router: createRouterFactory()\n        };\n    };\n}\n/**\n * Initialize EdgeStore - be done exactly once per backend\n */ const initEdgeStore = new EdgeStoreBuilder(); // ↓↓↓ TYPE TESTS ↓↓↓\n // type Context = {\n //   userId: string;\n //   userRole: 'admin' | 'visitor';\n // };\n // const es = initEdgeStore.context<Context>().create();\n // const imagesBucket = es.imageBucket()\n //   .input(\n //     z.object({\n //       type: z.enum(['profile', 'post']),\n //       extension: z.string().optional(),\n //     }),\n //   )\n //   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n //   .metadata(({ ctx, input }) => ({\n //     extension: input.extension,\n //     role: ctx.userRole,\n //   }))\n //   .beforeUpload(() => {\n //     return true;\n //   });\n // const a = es.imageBucket()\n //   .input(z.object({ type: z.string(), someMeta: z.string().optional() }))\n //   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n //   .metadata(({ ctx, input }) => ({\n //     role: ctx.userRole,\n //     someMeta: input.someMeta,\n //   }))\n //   .accessControl({\n //     OR: [\n //       {\n //         userId: { path: 'author' }, // this will check if the userId is the same as the author in the path parameter\n //       },\n //       {\n //         userRole: 'admin', // this is the same as { userRole: { eq: \"admin\" } }\n //       },\n //     ],\n //   })\n //   .beforeUpload(({ ctx, input }) => {\n //     return true;\n //   })\n //   .beforeDelete(({ ctx, file }) => {\n //     return true;\n //   });\n // const b = es.imageBucket().path(({ ctx }) => [{ author: ctx.userId }]);\n // const router = es.router({\n //   original: imagesBucket,\n //   imageBucket: a,\n //   imageBucket2: b,\n // });\n // export { router };\n // type ListFilesResponse<TBucket extends AnyRouter['buckets'][string]> = {\n //   data: {\n //     // url: string;\n //     // size: number;\n //     // uploadedAt: Date;\n //     // metadata: InferMetadataObject<TBucket>;\n //     path: InferBucketPathKeys<TBucket> extends string ? {\n //       [key: string]: string;\n //     } :{\n //       [TKey in InferBucketPathKeys<TBucket>]: string;\n //     };\n //   }[];\n //   pagination: {\n //     currentPage: number;\n //     totalPages: number;\n //     totalCount: number;\n //   };\n // };\n // type TPathKeys = 'author' | 'type';\n // type TPathKeys2 = InferBucketPathKeys<AnyBuilder>;\n // type ObjectWithKeys<TKeys extends string> = {\n //   [TKey in TKeys]: string;\n // };\n // type Test1 = ObjectWithKeys<TPathKeys>;\n // type Test2 = ObjectWithKeys<TPathKeys2>;\n // type PathKeys = InferBucketPathKeys<typeof router.buckets.imageBucket>;\n // type MetadataKeys = InferMetadataObject<typeof router.buckets.imageBucket>;\n // type MyEdgeStoreRouter = typeof router;\n // type MyAccessControl = AccessControlSchema<Context, AnyDef>;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@edgestore+shared@0.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1_zod@3.23.8/node_modules/@edgestore/shared/dist/index.mjs\n");

/***/ })

};
;