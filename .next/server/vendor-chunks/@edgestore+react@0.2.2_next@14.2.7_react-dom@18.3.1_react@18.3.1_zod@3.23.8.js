"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8";
exports.ids = ["vendor-chunks/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/index.mjs":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/index.mjs ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEdgeStoreProvider: () => (/* binding */ createEdgeStoreProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.7_@babel+core@7.25.2_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @edgestore/shared */ \"(ssr)/./node_modules/.pnpm/@edgestore+shared@0.2.2_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/shared/dist/index.mjs\");\n/* harmony import */ var _uploadAbortedError_e1379bb0_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./uploadAbortedError-e1379bb0.mjs */ \"(ssr)/./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/uploadAbortedError-e1379bb0.mjs\");\n\n\n\n\nclass EdgeStoreClientError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'EdgeStoreError';\n    }\n}\n\nasync function handleError(res) {\n    let json = {};\n    try {\n        json = await res.json();\n    } catch (err) {\n        throw new EdgeStoreClientError(`Failed to parse response. Make sure the api is correctly configured at ${res.url}`);\n    }\n    throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_1__.EdgeStoreApiClientError({\n        response: json\n    });\n}\n\nfunction createNextProxy({ apiPath, uploadingCountRef, maxConcurrentUploads = 5 }) {\n    return new Proxy({}, {\n        get (_, prop) {\n            const bucketName = prop;\n            const bucketFunctions = {\n                upload: async (params)=>{\n                    try {\n                        params.onProgressChange?.(0);\n                        // This handles the case where the user cancels the upload while it's waiting in the queue\n                        const abortPromise = new Promise((resolve)=>{\n                            params.signal?.addEventListener('abort', ()=>{\n                                resolve();\n                            }, {\n                                once: true\n                            });\n                        });\n                        while(uploadingCountRef.current >= maxConcurrentUploads && uploadingCountRef.current > 0){\n                            await Promise.race([\n                                new Promise((resolve)=>setTimeout(resolve, 300)),\n                                abortPromise\n                            ]);\n                            if (params.signal?.aborted) {\n                                throw new _uploadAbortedError_e1379bb0_mjs__WEBPACK_IMPORTED_MODULE_2__.U('File upload aborted');\n                            }\n                        }\n                        uploadingCountRef.current++;\n                        const fileInfo = await uploadFile(params, {\n                            bucketName: bucketName,\n                            apiPath\n                        });\n                        return fileInfo;\n                    } finally{\n                        uploadingCountRef.current--;\n                    }\n                },\n                confirmUpload: async (params)=>{\n                    const { success } = await confirmUpload(params, {\n                        bucketName: bucketName,\n                        apiPath\n                    });\n                    if (!success) {\n                        throw new EdgeStoreClientError('Failed to confirm upload');\n                    }\n                },\n                delete: async (params)=>{\n                    const { success } = await deleteFile(params, {\n                        bucketName: bucketName,\n                        apiPath\n                    });\n                    if (!success) {\n                        throw new EdgeStoreClientError('Failed to delete file');\n                    }\n                }\n            };\n            return bucketFunctions;\n        }\n    });\n}\nasync function uploadFile({ file, signal, input, onProgressChange, options }, { apiPath, bucketName }) {\n    try {\n        onProgressChange?.(0);\n        const res = await fetch(`${apiPath}/request-upload`, {\n            method: 'POST',\n            credentials: 'include',\n            signal: signal,\n            body: JSON.stringify({\n                bucketName,\n                input,\n                fileInfo: {\n                    extension: file.name.split('.').pop(),\n                    type: file.type,\n                    size: file.size,\n                    fileName: options?.manualFileName,\n                    replaceTargetUrl: options?.replaceTargetUrl,\n                    temporary: options?.temporary\n                }\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!res.ok) {\n            await handleError(res);\n        }\n        const json = await res.json();\n        if ('multipart' in json) {\n            await multipartUpload({\n                bucketName,\n                multipartInfo: json.multipart,\n                onProgressChange,\n                signal,\n                file,\n                apiPath\n            });\n        } else if ('uploadUrl' in json) {\n            // Single part upload\n            // Upload the file to the signed URL and get the progress\n            await uploadFileInner({\n                file,\n                uploadUrl: json.uploadUrl,\n                onProgressChange,\n                signal\n            });\n        } else {\n            throw new EdgeStoreClientError('An error occurred');\n        }\n        return {\n            url: getUrl(json.accessUrl, apiPath),\n            thumbnailUrl: json.thumbnailUrl ? getUrl(json.thumbnailUrl, apiPath) : null,\n            size: json.size,\n            uploadedAt: new Date(json.uploadedAt),\n            path: json.path,\n            pathOrder: json.pathOrder,\n            metadata: json.metadata\n        };\n    } catch (e) {\n        if (e instanceof Error && e.name === 'AbortError') {\n            throw new _uploadAbortedError_e1379bb0_mjs__WEBPACK_IMPORTED_MODULE_2__.U('File upload aborted');\n        }\n        onProgressChange?.(0);\n        throw e;\n    }\n}\n/**\n * Protected files need third-party cookies to work.\n * Since third party cookies don't work on localhost,\n * we need to proxy the file through the server.\n */ function getUrl(url, apiPath) {\n    const mode = typeof process !== 'undefined' ? \"development\" :  false ? 0 : 'production';\n    if (mode === 'development' && !url.includes('/_public/')) {\n        const proxyUrl = new URL(window.location.origin);\n        proxyUrl.pathname = `${apiPath}/proxy-file`;\n        proxyUrl.search = new URLSearchParams({\n            url\n        }).toString();\n        return proxyUrl.toString();\n    }\n    return url;\n}\nasync function uploadFileInner(props) {\n    const { file, uploadUrl, onProgressChange, signal } = props;\n    const promise = new Promise((resolve, reject)=>{\n        if (signal?.aborted) {\n            reject(new _uploadAbortedError_e1379bb0_mjs__WEBPACK_IMPORTED_MODULE_2__.U('File upload aborted'));\n            return;\n        }\n        const request = new XMLHttpRequest();\n        request.open('PUT', uploadUrl);\n        // This is for Azure provider. Specifies the blob type\n        request.setRequestHeader('x-ms-blob-type', 'BlockBlob');\n        request.addEventListener('loadstart', ()=>{\n            onProgressChange?.(0);\n        });\n        request.upload.addEventListener('progress', (e)=>{\n            if (e.lengthComputable) {\n                // 2 decimal progress\n                const progress = Math.round(e.loaded / e.total * 10000) / 100;\n                onProgressChange?.(progress);\n            }\n        });\n        request.addEventListener('error', ()=>{\n            reject(new Error('Error uploading file'));\n        });\n        request.addEventListener('abort', ()=>{\n            reject(new _uploadAbortedError_e1379bb0_mjs__WEBPACK_IMPORTED_MODULE_2__.U('File upload aborted'));\n        });\n        request.addEventListener('loadend', ()=>{\n            // Return the ETag header (needed to complete multipart upload)\n            resolve(request.getResponseHeader('ETag'));\n        });\n        if (signal) {\n            signal.addEventListener('abort', ()=>{\n                request.abort();\n            });\n        }\n        request.send(file);\n    });\n    return promise;\n}\nasync function multipartUpload(params) {\n    const { bucketName, multipartInfo, onProgressChange, file, signal, apiPath } = params;\n    const { partSize, parts, totalParts, uploadId, key } = multipartInfo;\n    const uploadingParts = [];\n    const uploadPart = async (params)=>{\n        const { part, chunk } = params;\n        const { uploadUrl } = part;\n        const eTag = await uploadFileInner({\n            file: chunk,\n            uploadUrl,\n            signal,\n            onProgressChange: (progress)=>{\n                const uploadingPart = uploadingParts.find((p)=>p.partNumber === part.partNumber);\n                if (uploadingPart) {\n                    uploadingPart.progress = progress;\n                } else {\n                    uploadingParts.push({\n                        partNumber: part.partNumber,\n                        progress\n                    });\n                }\n                const totalProgress = Math.round(uploadingParts.reduce((acc, p)=>acc + p.progress * 100, 0) / totalParts) / 100;\n                onProgressChange?.(totalProgress);\n            }\n        });\n        if (!eTag) {\n            throw new EdgeStoreClientError('Could not get ETag from multipart response');\n        }\n        return {\n            partNumber: part.partNumber,\n            eTag\n        };\n    };\n    // Upload the parts in parallel\n    const completedParts = await queuedPromises({\n        items: parts.map((part)=>({\n                part,\n                chunk: file.slice((part.partNumber - 1) * partSize, part.partNumber * partSize)\n            })),\n        fn: uploadPart,\n        maxParallel: 5,\n        maxRetries: 10\n    });\n    // Complete multipart upload\n    const res = await fetch(`${apiPath}/complete-multipart-upload`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n            bucketName,\n            uploadId,\n            key,\n            parts: completedParts\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        await handleError(res);\n    }\n}\nasync function confirmUpload({ url }, { apiPath, bucketName }) {\n    const res = await fetch(`${apiPath}/confirm-upload`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n            url,\n            bucketName\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        await handleError(res);\n    }\n    return res.json();\n}\nasync function deleteFile({ url }, { apiPath, bucketName }) {\n    const res = await fetch(`${apiPath}/delete-file`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n            url,\n            bucketName\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        await handleError(res);\n    }\n    return res.json();\n}\nasync function queuedPromises({ items, fn, maxParallel, maxRetries = 0 }) {\n    const results = new Array(items.length);\n    const executeWithRetry = async (func, retries)=>{\n        try {\n            return await func();\n        } catch (error) {\n            if (error instanceof _uploadAbortedError_e1379bb0_mjs__WEBPACK_IMPORTED_MODULE_2__.U) {\n                throw error;\n            }\n            if (retries > 0) {\n                await new Promise((resolve)=>setTimeout(resolve, 5000));\n                return executeWithRetry(func, retries - 1);\n            } else {\n                throw error;\n            }\n        }\n    };\n    const semaphore = {\n        count: maxParallel,\n        async wait () {\n            // If we've reached our maximum concurrency, or it's the last item, wait\n            while(this.count <= 0)await new Promise((resolve)=>setTimeout(resolve, 500));\n            this.count--;\n        },\n        signal () {\n            this.count++;\n        }\n    };\n    const tasks = items.map((item, i)=>(async ()=>{\n            await semaphore.wait();\n            try {\n                const result = await executeWithRetry(()=>fn(item), maxRetries);\n                results[i] = result;\n            } finally{\n                semaphore.signal();\n            }\n        })());\n    await Promise.all(tasks);\n    return results;\n}\n\nconst DEFAULT_BASE_URL = (typeof process !== 'undefined' ? process.env.NEXT_PUBLIC_EDGE_STORE_BASE_URL :  undefined) ?? 'https://files.edgestore.dev';\nfunction createEdgeStoreProvider(opts) {\n    const EdgeStoreContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\n    const EdgeStoreProvider = ({ children, basePath })=>{\n        return EdgeStoreProviderInner({\n            children,\n            context: EdgeStoreContext,\n            basePath,\n            maxConcurrentUploads: opts?.maxConcurrentUploads\n        });\n    };\n    function useEdgeStore() {\n        if (!EdgeStoreContext) {\n            throw new Error('React Context is unavailable in Server Components');\n        }\n        // @ts-expect-error - We know that the context value should not be undefined\n        const value = react__WEBPACK_IMPORTED_MODULE_0__.useContext(EdgeStoreContext);\n        if (!value && \"development\" !== 'production') {\n            throw new Error('[edgestore]: `useEdgeStore` must be wrapped in a <EdgeStoreProvider />');\n        }\n        return value;\n    }\n    return {\n        EdgeStoreProvider,\n        useEdgeStore\n    };\n}\nfunction EdgeStoreProviderInner({ children, context, basePath, maxConcurrentUploads }) {\n    const apiPath = basePath ? `${basePath}` : '/api/edgestore';\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        loading: true,\n        initialized: false,\n        error: false\n    });\n    const uploadingCountRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const initExecuted = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false); // to make sure we don't run init twice\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!initExecuted.current) {\n            void init();\n        }\n        return ()=>{\n            initExecuted.current = true;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    async function init() {\n        try {\n            setState({\n                loading: true,\n                initialized: false,\n                error: false\n            });\n            const res = await fetch(`${apiPath}/init`, {\n                method: 'POST',\n                credentials: 'include'\n            });\n            if (res.ok) {\n                const json = await res.json();\n                const innerRes = await fetch(`${DEFAULT_BASE_URL}/_init`, {\n                    method: 'GET',\n                    credentials: 'include',\n                    headers: {\n                        'x-edgestore-token': json.token\n                    }\n                });\n                if (innerRes.ok) {\n                    // update state\n                    setState({\n                        loading: false,\n                        initialized: true,\n                        error: false\n                    });\n                } else {\n                    setState({\n                        loading: false,\n                        initialized: false,\n                        error: true\n                    });\n                    throw new EdgeStoreClientError(\"Couldn't initialize Edge Store.\");\n                }\n            } else {\n                setState({\n                    loading: false,\n                    initialized: false,\n                    error: true\n                });\n                await handleError(res);\n            }\n        } catch (err) {\n            setState({\n                loading: false,\n                initialized: false,\n                error: true\n            });\n            throw err;\n        }\n    }\n    async function reset() {\n        await init();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: {\n            edgestore: createNextProxy({\n                apiPath,\n                uploadingCountRef,\n                maxConcurrentUploads\n            }),\n            reset,\n            state\n        }\n    }, children));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/uploadAbortedError-e1379bb0.mjs":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/uploadAbortedError-e1379bb0.mjs ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   U: () => (/* binding */ UploadAbortedError)\n/* harmony export */ });\nclass UploadAbortedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'UploadAbortedError';\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVkZ2VzdG9yZStyZWFjdEAwLjIuMl9uZXh0QDE0LjIuN19yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV96b2RAMy4yMy44L25vZGVfbW9kdWxlcy9AZWRnZXN0b3JlL3JlYWN0L2Rpc3QvdXBsb2FkQWJvcnRlZEVycm9yLWUxMzc5YmIwLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsaW5rLWUtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVkZ2VzdG9yZStyZWFjdEAwLjIuMl9uZXh0QDE0LjIuN19yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV96b2RAMy4yMy44L25vZGVfbW9kdWxlcy9AZWRnZXN0b3JlL3JlYWN0L2Rpc3QvdXBsb2FkQWJvcnRlZEVycm9yLWUxMzc5YmIwLm1qcz80MWYyIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFVwbG9hZEFib3J0ZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKXtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVcGxvYWRBYm9ydGVkRXJyb3InO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVXBsb2FkQWJvcnRlZEVycm9yIGFzIFUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@edgestore+react@0.2.2_next@14.2.7_react-dom@18.3.1_react@18.3.1_zod@3.23.8/node_modules/@edgestore/react/dist/uploadAbortedError-e1379bb0.mjs\n");

/***/ })

};
;