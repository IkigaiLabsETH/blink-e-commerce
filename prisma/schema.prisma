generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Seller {
  id             String    @id @default(uuid()) @unique
  username       String    @unique
  walletAddress  String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  products       Product[] 
  blink          SellerBlink?
  blinkCreated   Boolean   @default(false)
  payments       ProductPurchaseTransaction[]
  orders         Order[]

  @@index([walletAddress])
  @@index([username])
}

model Product {
  id            String   @id @default(uuid()) 
  name          String
  title         String
  description   String
  label         String
  imageUrl      String
  price         Decimal  // Numeric type for precise values
  stock         Int      // Integer type for stock quantity
  sellerId      String   
  seller        Seller   @relation(fields: [sellerId], references: [walletAddress]) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  purchases     ProductPurchaseTransaction[]
  orders        Order[]

  @@index([sellerId])
}

model Order {
  id             String   @id @default(uuid()) 
  name           String
  city           String
  state          String
  dropOffAddress String   // Fixed typo from 'dropOfAddress' to 'dropOffAddress'
  zipCode        String
  orderStatus    OrderStatus @default(PROCESSING)
  buyerWallet    String 
  user           User    @relation(fields: [buyerWallet], references: [walletAddress])

  productId      String
  product        Product @relation(fields: [productId], references: [id])

  sellerId       String
  seller         Seller  @relation(fields: [sellerId], references: [walletAddress])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SellerBlink {
  id            String  @id @default(uuid())
  title         String
  icon          String  
  description   String
  label         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sellerWallet  String  @unique
  seller        Seller  @relation(fields: [sellerWallet], references: [walletAddress])

  @@index([sellerWallet], name: "seller_wallet_index")
  @@index([id])
}

model ProductPurchaseTransaction {
  id             String   @id @default(uuid())
  amount         Decimal 
  referenceKey   String  // For identifying the transaction
  transactionId  String? // Optional field to store transaction ID if successful
  status         Status  @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sellerWallet   String
  seller         Seller  @relation(fields: [sellerWallet], references: [walletAddress])

  productId      String
  product        Product @relation(fields: [productId], references: [id])

  orderedWallet  String // Wallet of the person who made the purchase
  user           User    @relation(fields: [orderedWallet], references: [walletAddress])
  
  @@index([referenceKey])
}

model User {
  id             String   @id @default(uuid())
  walletAddress  String   @unique
  name           String 
  orders         Order[]
  emailAddress   String   @unique
  purchases      ProductPurchaseTransaction[]

  @@index([walletAddress])
}

enum Status {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
